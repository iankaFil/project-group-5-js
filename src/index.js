const axios = require('axios').default;
const API_KEY = '31449444226ba6345698313fe055564a';
const LANGUAGE = 'ru';
//https://api.themoviedb.org/3/configuration/languages?api_key=31449444226ba6345698313fe055564a

import noImg from './images/no-image.jpg';

let genres = [];

// –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò
let totalPages = 0;
let currentPage = 1;
let pageLinks = 5; //   –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ ((–Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞, –ø—Ä–∏–º–µ—Ä - 1 2 [3] 4 5))
const paginationRange = Math.floor(pageLinks / 2);
let startPaginationPage = 1;
let stopPaginationPage = pageLinks;
//------------------------------------------------

const movieContainer = document.querySelector('.js-movies-container');
const pagination = document.querySelector('.js-paginator');
const searchMovieInput = document.querySelector('.js-search-form__input');
const searchForm = document.querySelector('.js-search-form');
const backdrop = document.querySelector('.backdrop');
const libraryButtonsBlock = document.querySelector('.js-library-buttons-block');
const buttonLibraryWatched = document.querySelector('.js-watched');
const buttonLibraryQueue = document.querySelector('.js-queue');

window.addEventListener('load', highlightActiveLink); // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ö–µ–¥–µ—Ä–µ

// –ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É  WATCHED –≤ —Ö–µ–¥–µ—Ä–µ
// buttonLibraryWatched.addEventListener('click', () => {
//   showMoviesFromLocalstorage('watched');
//   buttonLibraryWatched.classList.add('highlighted');
//   buttonLibraryQueue.classList.remove('highlighted');
//   setRoute('library', { mode: 'watched' }); // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞  —Å–ø–∏—Å–æ–∫ watched
// });

// –ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É  QUEUE –≤ —Ö–µ–¥–µ—Ä–µ
// buttonLibraryQueue.addEventListener('click', () => {
//   showMoviesFromLocalstorage('queue');
//   buttonLibraryQueue.classList.add('highlighted');
//   buttonLibraryWatched.classList.remove('highlighted');
//   setRoute('library', { mode: 'queue' }); // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞  —Å–ø–∏—Å–æ–∫ queue
// });

// –û–±—ä–µ–∫—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Ä–æ—É—Ç–æ–≤ (–Ω–∞–≤–∏–≥–∞—Ü–∏—è)
const routes = {
  '/': home,
  '/js-group-project/': home, // –ò–°–ü–†–ê–í–ò–¢–¨ –ù–ê –ü–£–¢–¨ –ü–†–û–ï–ö–¢–ê –ù–ê GITHUB
  '/library': library,
  '/js-group-project/library': library, // –ò–°–ü–†–ê–í–ò–¢–¨ –ù–ê –ü–£–¢–¨ –ü–†–û–ï–ö–¢–ê –ù–ê GITHUB
};

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–æ—É—Ç –∏–∑ URL
const route = window.location.pathname;
console.log('ROUTE', route);
console.log('window.location', window.location);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–∞
if (routes[route]) {
  // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–æ—É—Ç–∞
  routes[route]();
} else {
  console.log('Route not found');
}

//-------------------------------------- BACKDROP
//
// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –Ω–∞ –±—ç–∫–¥—Ä–æ–ø–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ –µ–≥–æ, —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ ...
backdrop.addEventListener('click', ({ target }) => {
  // –∑–∞–∫—Ä—ã—Ç–∏–µ –±—ç–∫–¥—Ä–æ–ø–∞
  if (target === backdrop) {
    backdrop.classList.add('is-hidden');
  }

  // –ª–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É js-watched
  if (target.tagName === 'BUTTON' && target.classList.contains('js-watched')) {
    const idMovie = target.dataset.id;
    console.log('PRESSED js-watched', idMovie);

    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂—É –≤ watched —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ deleteMovieFromLocalStorage
    if (loadArayFromLocalStorage('watched').includes(String(idMovie))) {
      console.log('–£–î–ê–õ–ò–¢–¨ ', idMovie);
      deleteMovieFromLocalStorage(idMovie, 'watched');
    } else {
      // –µ—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ watched
      addMovieToWatchedList(target.dataset.id);
    }
    renderBackdropButtonsState(target);

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å mode
    if (getRoute('mode')) {
      showMoviesFromLocalstorage(getRoute('mode')); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    }
  }

  // –ª–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É js-queue
  if (target.tagName === 'BUTTON' && target.classList.contains('js-queue')) {
    const idMovie = target.dataset.id;
    console.log('PRESSED js-queue');

    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂—É –≤ queue —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ deleteMovieFromLocalStorage
    if (loadArayFromLocalStorage('queue').includes(String(idMovie))) {
      console.log('–£–î–ê–õ–ò–¢–¨ ', idMovie);
      deleteMovieFromLocalStorage(idMovie, 'queue');
    } else {
      // –µ—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ queue
      addMovieToQueueList(target.dataset.id);
    }
    renderBackdropButtonsState(target);

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å mode
    if (getRoute('mode')) {
      showMoviesFromLocalstorage(getRoute('mode')); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    }
  }
  // –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏–º –º–µ—Å—Ç–æ –∫—É–¥–∞ –Ω–∞–∂–∞–ª–∏
  console.dir(target);
});

searchForm.addEventListener('submit', checkForm); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞
pagination.addEventListener('click', gotoPage); // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–µ

// –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫–ª—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç true –ø–æ–∫–∞–∑–∞—Ç—å, false —Å–∫—Ä—ã—Ç—å, —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
function displayElement(element, isHide) {
  if (element) {
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
    element.style.display = isHide ? 'block' : 'none';
  }
}

async function showMoviesFromLocalstorage(keyOfStorage) {
  //  –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –∫–ª—é—á—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ Localstorage
  const queueArray = loadArayFromLocalStorage(keyOfStorage);
  if (queueArray.length > 0) {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    const arrayOfPromises = queueArray.map(async movieId => {
      const { data } = await axios.get(
        `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=${LANGUAGE}`
      );
      return data;
    });
    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const movies = await Promise.all(arrayOfPromises);
    console.log(movies);
    renderMoviesFromLocalstorageArray(movies);
  } else {
    movieContainer.innerHTML = ''; // –ï—Å–ª–∏ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ—Ç, —Ç–æ –æ—á–∏—â–∞–µ–º
  }
}

// –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂, —Ç–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä data –º–∞—Å—Å–∏–≤ —Å —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ - —Ñ–∏–ª—å–º–æ–≤
// TODO –ù–µ–ø–ª–æ—Ö–æ –±—ã –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é renderMovies –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ —Å–º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å
function renderMoviesFromLocalstorageArray(data) {
  const movies = data
    .map(movie => {
      return `
      <li class="movie">
        <a href="#show-moovie=${movie.id}"
         class="movie__link" data-movie="${movie.id}">
        <img class="movie__image" ${
          movie.poster_path
            ? 'src="https://image.tmdb.org/t/p/w300' + movie.poster_path + '">'
            : 'src="' + noImg + '">'
        }
        </a>
        <h2 class="movie__title">${movie.title}</h2>
        <p class="movie__description">
          ${movie.genres.map(({ name }) => name).join(', ')}
         | <span>
        ${getYearFromDate(movie.release_date)}
        </span>
        <span class="movie__rating">${movie.vote_average}</span>
        </p>
        </li>`;
    })
    .join(''); //${getYearFromDate(movie.release_date)}    ${getGenreById(
  console.log(data);

  movieContainer.innerHTML = movies;

  addClickListenerToMovie();
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–æ—É—Ç–∞ '/'
function home() {
  console.log('Home page');

  // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const params = new URLSearchParams(window.location.search);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä search
  if (params.has('search')) {
    console.log(`Search: ${params.get('search')}`);
  }

  searchWordToInput();

  getGenres().then(genresArray => {
    genres = genresArray;
    getFilmsByUrl(getUrlFromSearchParam());
  });
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–æ—É—Ç–∞ '/library'
function library() {
  displayElement(searchForm, false); // —É–±–∏—Ä–∞—é —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞
  displayElement(libraryButtonsBlock, true); // –ø–æ–∫–∞–∑—ã–≤–∞—é –∫–Ω–æ–ø–∫–∏ watched –∏ queue

  const mode = getRoute('mode') || 'queue'; // –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç–æ–π —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 'queue'
  console.log('üöÄ ~ file: index.js:200 ~ library ~ mode', mode);

  showMoviesFromLocalstorage(mode); // –ø–æ–∫–∞–∑—ã–≤–∞—é —Ñ–∏–ª—å–º—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂–µ
  setRoute('library', { mode: mode }); // –ø–æ —É–º–æ—á–∞–Ω–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞  —Å–ø–∏—Å–æ–∫ queue
  highlighteHeaderButtons(); // –∫—Ä–∞—à—É –∫–Ω–æ–ø–∫–∏
}

// –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (Watched queue) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ my -library
function highlighteHeaderButtons() {
  // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¶–§
  if (getRoute('mode') === 'queue') {
    buttonLibraryQueue.classList.add('highlighted');
  }
  if (getRoute('mode') === 'watched') {
    buttonLibraryWatched.classList.add('highlighted');
  }
}

function getRoute(key) {
  const params = new URLSearchParams(window.location.search);
  return params.get(key);
}

//setRoute('/', { search: 'avatar' }).
function setRoute(route, params) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const searchParams = new URLSearchParams(params);
  const url = `${route}?${searchParams.toString()}`;

  // –ó–∞–¥–∞–µ–º URL –≤ —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
  window.history.pushState({}, '', url);
}

// –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –±—ç–∫–¥—Ä–æ–ø–µ TODO –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ render –∏ –±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–æ–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –æ–±—ä–µ–∫—Ç–∞
function renderBackdropButtonsState() {
  const buttonJsWatched = backdrop.querySelector('button.js-watched');

  const buttonJsQueue = backdrop.querySelector('button.js-queue');

  // –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  if (
    loadArayFromLocalStorage('watched').includes(
      String(buttonJsWatched.dataset.id)
    )
  ) {
    buttonJsWatched.textContent = 'remove from watched';
    buttonJsWatched.classList.add('highlighted');
  } else {
    buttonJsWatched.classList.remove('highlighted');
    buttonJsWatched.textContent = 'add to watched';
  }

  if (
    loadArayFromLocalStorage('queue').includes(String(buttonJsQueue.dataset.id))
  ) {
    buttonJsQueue.textContent = 'remove from queue';
    buttonJsQueue.classList.add('highlighted');
  } else {
    buttonJsQueue.classList.remove('highlighted');
    buttonJsQueue.textContent = 'add to queue';
  }
}

//  –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö  –≤ —Ñ–æ—Ä–º–µ –∏ –µ—Å–ª–∏ –≤—Å–µ –≥—É–¥ —Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞
function checkForm(event) {
  event.preventDefault();
  let inputValue = searchForm.elements.search.value;

  inputValue = inputValue.trim();

  if (inputValue.length === 0) {
    return false;
  } else {
    searchForm.elements.search.value = inputValue;
    searchForm.submit();
  }
}

function searchWordToInput() {
  const currentURL = window.location.href;
  const searchWord = new URL(currentURL).searchParams.get('search');
  if (searchWord !== null) {
    searchMovieInput.value = searchWord.trim();
  }
}
// –≥–µ–Ω–µ—Ä–∏—Ç URL –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
function getUrlFromSearchParam() {
  const currentURL = window.location.href;
  const searchWord = new URL(currentURL).searchParams.get('search');
  const page = new URL(currentURL).searchParams.get('page');
  let query = '';
  if (searchWord) {
    query = page
      ? `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchWord}&page=${page}&language=${LANGUAGE}`
      : `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchWord}&language=${LANGUAGE}`;
  } else {
    query = page
      ? `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`
      : `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&language=${LANGUAGE}`;
  }
  return query;
}

// –º–µ–Ω—è–µ—Ç url –≤ —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
function setPageToUrl(page) {
  const currentUrl = new URL(window.location.href);
  currentUrl.searchParams.set('page', page);
  history.pushState({}, '', currentUrl.toString());
}

// –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ my-library –∏ Home
function highlightActiveLink() {
  const currentURL = window.location.href;
  const currentPage = new URL(currentURL).pathname;

  const links = document.querySelectorAll('a.header__menu-link');
  for (const link of links) {
    const linkPage = new URL(link.href).pathname;
    if (currentPage === linkPage) {
      link.classList.add('active');
    } else {
      link.classList.remove('active');
    }
  }
}

// —Å–∫—Ä–æ–ª–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É  –≤–≤–µ—Ä—Ö
function scrollTop() {
  window.scrollTo(0, 0);
}

// –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é  —Å—Ç—Ä–∞–Ω–∏—Ü—É
function gotoPage({ target }) {
  if (target.tagName === 'BUTTON') {
    currentPage = Number(target.dataset.gotopage);
    setPageToUrl(currentPage);
    getFilmsByUrl(getUrlFromSearchParam());
    scrollTop();
  }
}
//  —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ TODO —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≥–ª—é–∫ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ –∫–Ω–æ–ø–æ–∫,
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Ç—Ä–∏ —Ç–æ—á–∫–∏ ... –Ω–∞ –≤–µ—Ä—Å–∏–∏ –±–æ–ª—å—à–µ –º–æ–±–∏–ª–∫–∏
function displayPagination(response) {
  let pages = [];

  // if (totalPages > 1) {
  if (response.total_pages > 1) {
    if (pageLinks >= response.total_pages) {
      pageLinks = response.total_pages;
    }

    if (currentPage <= 1 + paginationRange) {
      startPaginationPage = 1;
      stopPaginationPage = pageLinks;
    } else {
      startPaginationPage = currentPage - paginationRange;

      stopPaginationPage = currentPage + paginationRange;
      if (stopPaginationPage > response.total_pages) {
        stopPaginationPage = response.total_pages;
      }
    }

    if (currentPage > 1) {
      pages.push(
        `<button data-gotopage="${
          currentPage - 1
        }" class="pagination__button back" type="button"></button>`
      );
    }

    for (let i = startPaginationPage; i <= stopPaginationPage; i += 1) {
      console.log('üöÄ ~ file: index.js:333 ~ i', i);

      if (currentPage === i) {
        pages.push(
          `<button data-gotopage="${i}" class="pagination__button current" type="button">${i}</button>`
        );
      } else {
        pages.push(
          `<button data-gotopage="${i}" class="pagination__button" type="button">${i}</button>`
        );
      }
    }

    if (currentPage < response.total_pages) {
      pages.push(
        `<button data-gotopage="${
          currentPage + 1
        }" class="pagination__button forward" type="button"></button>`
      );
    }

    pagination.innerHTML = pages.join('');
  }
}

// —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≥–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã —Å API
function getYearFromDate(date) {
  const dateRelease = new Date(date);
  return dateRelease.getFullYear();
}

// —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ñ–∏–ª—å–º –Ω–∞ –±—ç–∫–¥—Ä–æ–ø
function renderMovieDetails(data) {
  console.log(data);
  backdrop.classList.remove('is-hidden');
  const content = `
  
  <img class="movie-detail__image" ${
    data.poster_path
      ? 'src="https://image.tmdb.org/t/p/w300' + data.poster_path + '">'
      : 'src="' + noImg + '">'
  }
  <h1 class="movie-detail__title">${data.title}</h1>
  <table class="movie-detail__table">
<tbody>
  <tr>
    <td><span class="movie-detail__title-table-titles">Vote / Votes</span></td>
    <td>${data.vote_average} / ${data.vote_count}</td>
  </tr>
  <tr>
    <td><span class="movie-detail__title-table-titles">Popularity</span></td>
    <td>${data.popularity}</td>
  </tr>
  <tr>
    <td><span class="movie-detail__title-table-titles">Original Title</span></td>
    <td>${data.original_title}</td>
  </tr>
  <tr>
    <td><span class="movie-detail__title-table-titles">Genre</span></td>
    <td>${getGenre(data.genres)}</td>
  </tr>
</tbody>
</table>
<h2 class="movie-detail__about">About</h2>
  <p class="movie-detail__about-text">
  ${data.overview}
  </p>
  <div class="movie-detail__buttons-wrapper">
  <button
  class="movie-detail__button js-watched" data-id="${
    data.id
  }" type="button">add to Watched</button>
  <button
  class="movie-detail__button js-queue" data-id="${
    data.id
  }" type="button">add to queue</button>
  </div>
  `;
  backdrop.querySelector('.movie-info').innerHTML = content;
  renderBackdropButtonsState();
}

// —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∂–∞–Ω—Ä—ã TODO –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ join
function getGenre(arr) {
  let genresOutput = [];
  for (const genre of arr) {
    genresOutput.push(genre.name);
  }

  return genresOutput.join(', ');
}

// —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–π–¥–∏ —Ñ–∏–ª—å–º–∞ –≤ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂ –ø–æ–¥ –∫–ª—é—á–µ–º watched
function addMovieToWatchedList(id) {
  saveIdMovieToLocalStorage(id, 'watched', 'queue');
}

// —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–π–¥–∏ —Ñ–∏–ª—å–º–∞ –≤ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂ –ø–æ–¥ –∫–ª—é—á–µ–º queue
function addMovieToQueueList(id) {
  saveIdMovieToLocalStorage(id, 'queue', 'watched');
}

// –Ω–∞—á–∏–Ω–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ addMovieToWatchedList
function saveIdMovieToLocalStorage(idMovie, key, keyToFindDuplicate) {
  let args = loadFromLocalStorage(key); // –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ loadArayFromLocalStorage
  let duplicateKey = loadFromLocalStorage(keyToFindDuplicate); //  –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ loadArayFromLocalStorage
  let arr = [];
  if (!args) {
    arr.push(idMovie);
  } else {
    arr.push(...args);
    if (!arr.includes(idMovie)) {
      arr.push(idMovie);
    }
  }
  saveToLocalStorage(key, arr);
  // —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ keyToFindDuplicate
  if (duplicateKey) {
    if (duplicateKey.indexOf(idMovie) !== -1) {
      duplicateKey.splice(duplicateKey.indexOf(idMovie), 1);
      saveToLocalStorage(keyToFindDuplicate, duplicateKey);
    }
  }
}
// —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é value –ø–æ –∫–ª—é—á—É key
function saveToLocalStorage(key, value) {
  try {
    const serializedState = JSON.stringify(value);
    localStorage.setItem(key, serializedState);
  } catch (error) {
    console.error('Set state error: ', error.message);
  }
}

// —É–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å–º  –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂ –ø–æ –∫–ª—é—á—É 'key' -watched –∏–ª–∏ queue –∏ –∑–Ω–∞—á–µ–Ω–∏—é id —Ñ–∏–ª—å–º–∞
function deleteMovieFromLocalStorage(movieId, key) {
  try {
    const Movies = JSON.parse(localStorage.getItem(key));
    const updatedMovies = Movies.filter(id => id !== movieId);
    localStorage.setItem(key, JSON.stringify(updatedMovies));
  } catch (error) {}
}

// –¥–æ—Å—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂ –ø–æ –∫–ª—é—á—É
function loadFromLocalStorage(key) {
  try {
    const serializedState = localStorage.getItem(key);
    return serializedState === null ? undefined : JSON.parse(serializedState);
  } catch (error) {
    console.error('Get state error: ', error.message);
  }
}

// –¥–æ—Å—Ç–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂ –ø–æ –∫–ª—é—á—É, –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å —ç—Ç–∏–º –∫–ª—é—á–µ–º —Ç–æ –≤—ã–≤–æ–¥–∏—Ç []
function loadArayFromLocalStorage(key) {
  try {
    const serializedState = localStorage.getItem(key);
    return serializedState === null ? [] : JSON.parse(serializedState);
  } catch (error) {
    console.error('Get state error: ', error.message);
  }
}

// API –∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ —Ñ–∏–ª—å–º–µ –ø–æ –µ–≥–æ ID
function showMovieDetails(id) {
  console.log(id);
  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=${LANGUAGE}`;
  axios
    .get(url)
    .then(response => {
      renderMovieDetails(response.data);
    })
    .catch(function (error) {
      if (error.response) {
        console.log(error.response.data);
        console.log(error.response.data.status_message);
      } else if (error.request) {
        console.log(error.request);
      } else {
        console.log('Error', error.message);
      }
    });
}

// —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ movieContainer
function renderMovies({ data }) {
  const movie = data.results
    .map(movie => {
      return `
      <li class="movie">
        <a href="#show-moovie=${movie.id}" 
         class="movie__link" data-movie="${movie.id}">
        <img class="movie__image" ${
          movie.poster_path
            ? 'src="https://image.tmdb.org/t/p/w300' + movie.poster_path + '">'
            : 'src="' + noImg + '">'
        }
        </a>
        <h2 class="movie__title">${movie.title}</h2>
        <p class="movie__description">${getGenreById(
          movie.genre_ids,
          genres
        )} | <span>${getYearFromDate(movie.release_date)}</span></p>
        </li>`;
    })
    .join('');

  movieContainer.innerHTML = movie;

  addClickListenerToMovie();
}

// TODO –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ –∫–ª–∏–Ω –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—é, –∞ –Ω–µ –≤–µ—à–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É....
function addClickListenerToMovie() {
  document.querySelectorAll('.movie__link').forEach(element => {
    element.addEventListener('click', event => {
      showMovieDetails(element.dataset.movie);
      event.preventDefault(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Ñ–∏–ª—å–º–∞
    });
  });
}

// API –∑–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ URL –∑–∞–ø—Ä–æ—Å–∞
function getFilmsByUrl(url) {
  axios
    .get(url)
    .then(response => {
      renderMovies(response);
      currentPage = response.data.page;
      totalPages = response.data.total_pages;
      displayPagination(response.data);
    })
    .catch(function (error) {
      if (error.response) {
        console.log(error.response.data);
        console.log(error.response.data.status_message);
      } else if (error.request) {
        console.log(error.request);
      } else {
        console.log('Error', error.message);
      }
    });
}

// API –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
async function getGenres() {
  return axios
    .get(
      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=${LANGUAGE}` //language=en-US
    )
    .then(({ data }) => {
      // console.log('–ñ–ê–ù–†–´ ', data.genres);
      return data.genres;
    });
}

function getGenreById(ids, arrGanres) {
  let arrNamesGenres = [];

  for (const id of ids) {
    for (const genre of arrGanres) {
      if (genre.id === id) {
        arrNamesGenres.push(genre.name);
      }
    }
  }

  // console.log(arrNamesGenres);
  return arrNamesGenres.length > 0
    ? arrNamesGenres.join(', ')
    : 'Genre not set';
}
